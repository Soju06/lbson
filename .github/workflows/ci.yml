name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }}-${{ matrix.arch }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        arch: [x64]
        include:
          # Apple Silicon (ARM64) support for macOS
          - os: macos-latest
            arch: arm64
            python-version: "3.9"
          - os: macos-latest
            arch: arm64
            python-version: "3.10"
          - os: macos-latest
            arch: arm64
            python-version: "3.11"
          - os: macos-latest
            arch: arm64
            python-version: "3.12"
          - os: macos-latest
            arch: arm64
            python-version: "3.13"

    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.arch }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.arch }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-${{ matrix.arch }}-pip-

    - name: 🔧 Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: 🔧 Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: 🔧 Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install make

    - name: ⬆️ Upgrade pip
      run: |
        python -m pip install --upgrade pip

    - name: 🏗️ Build package
      run: |
        make build

    - name: ✅ Test import
      run: |
        python -c "import lbson; print('✅ Import successful')"

    - name: 🧪 Run tests
      run: |
        make test

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}
        path: |
          .pytest_cache/
          *.log

  # ARM64 Linux using emulation
  test-arm64-linux:
    name: Test on Linux ARM64 with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: 🧪 Test on ARM64 Linux
      run: |
        docker run --rm --platform linux/arm64 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          python:${{ matrix.python-version }}-slim \
          bash -c "
            echo '🔧 Installing system dependencies...' && \
            apt-get update && \
            apt-get install -y build-essential cmake git make && \
            echo '🐍 Setting up Python environment...' && \
            python -m pip install --upgrade pip && \
            echo '🏗️ Building package...' && \
            make build && \
            echo '✅ Testing import...' && \
            python -c 'import lbson; print(\"✅ Import successful\")' && \
            echo '🧪 Running tests...' && \
            make test
          "

  # ARM 32-bit Linux using emulation
  test-arm-linux:
    name: Test on Linux ARM with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Set up QEMU for ARM emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm

    - name: 🧪 Test on ARM Linux
      run: |
        docker run --rm --platform linux/arm/v7 \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          python:${{ matrix.python-version }}-slim \
          bash -c "
            echo '🔧 Installing system dependencies...' && \
            apt-get update && \
            apt-get install -y build-essential cmake git make && \
            echo '🐍 Setting up Python environment...' && \
            python -m pip install --upgrade pip && \
            echo '🏗️ Building package...' && \
            make build && \
            echo '✅ Testing import...' && \
            python -c 'import lbson; print(\"✅ Import successful\")' && \
            echo '🧪 Running tests...' && \
            make test
          "

  # Summary job
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [test, test-arm64-linux, test-arm-linux]
    if: always()
    steps:
    - name: 📊 Check test results
      run: |
        echo "## Test Results Summary 📊" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Job Status:" >> $GITHUB_STEP_SUMMARY
        echo "- Main tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ARM64 Linux tests: ${{ needs.test-arm64-linux.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ARM Linux tests: ${{ needs.test-arm-linux.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.test-arm64-linux.result }}" == "success" && "${{ needs.test-arm-linux.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Check the individual job results for details."
          echo "❌ **Some tests failed. Check the individual job results for details.**" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
